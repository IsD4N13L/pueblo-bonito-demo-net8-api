# .github/workflows/jenkins-pipeline.yml
name: Trigger Jenkins via WireGuard

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  trigger-jenkins:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install WireGuard
      run: |
        sudo apt-get update
        sudo apt-get install -y wireguard-tools
    - name: Setup WireGuard and test Jenkins
      run: |
        echo "[Interface]
        PrivateKey = +MTGxmWhuWB8m3FzTZLJISc6UWUeEoCB4OSmk9IoDHA=
        Address = 10.0.0.2/32
        DNS = 8.8.8.8 
        
        [Peer]
        PublicKey = PM1Y6oVw9AIvO16QG7iPStwnjQ3veOF1uoz/DqZGTH0=
        Endpoint = 177.245.224.28:51820
        AllowedIPs = 10.0.0.0/24
        PersistentKeepalive = 25" | sudo tee /etc/wireguard/wg0.conf > /dev/null
        
        sudo chmod 600 /etc/wireguard/wg0.conf
        sudo wg-quick up wg0
        sleep 5
        
        # Verificar que WireGuard est√© funcionando
        echo "WireGuard status:"
        sudo wg show
        
        # Probar conectividad al servidor WireGuard
        echo "Testing WireGuard server connectivity..."
        ping -c 3 10.0.0.1
        
        # Probar Jenkins
        echo "Testing Jenkins..."
        curl -I http://10.0.0.1:8080 --connect-timeout 10 --max-time 10
        
        # Si Jenkins responde, continuar con el pipeline
        if curl -s http://10.0.0.1:8080 >/dev/null 2>&1; then
          echo "‚úÖ Jenkins is accessible via WireGuard"
        else
          echo "‚ùå Jenkins is not accessible"
          exit 1
        fi
    # - name: Setup WireGuard VPN
    #   run: |
    #     # Usa el secreto con la configuraci√≥n completa
    #     echo "${{ secrets.WIREGUARD_CLIENT_CONF }}" | sudo tee /etc/wireguard/wg0.conf > /dev/null
    #     sudo chmod 600 /etc/wireguard/wg0.conf
        
    #     # Configurar la interfaz WireGuard
    #     sudo wg-quick up wg0
        
    #     # Verificar conexi√≥n (importante para depuraci√≥n)
    #     sleep 5
    #     sudo wg show
        
    #     # Test de conectividad al servidor Jenkins
    #     ping -c 3 ${{ secrets.JENKINS_INTERNAL_IP }} || echo "Ping failed, but continuing..."
    - name: Test WireGuard
      run: |
        sudo wg show
        ip a
        ip route
        ping -c 3 10.0.0.1
        curl -v http://10.0.0.1:8080
    - name: Validate VPN and Jenkins Connection
      run: |
        # Validar que la interfaz wg0 existe y est√° activa
        if ! sudo wg show wg0 &> /dev/null; then
          echo "‚ùå Error: La interfaz wg0 no est√° activa. Revisa la configuraci√≥n de WireGuard."
          exit 1
        fi
        echo "‚úÖ La interfaz wg0 de WireGuard est√° activa."
        echo ""
    
        # Usar ping para una verificaci√≥n de conectividad de bajo nivel
        echo "Pingeando la IP interna de Jenkins (${{ secrets.JENKINS_INTERNAL_IP }})..."
        if ping -c 3 -W 5 ${{ secrets.JENKINS_INTERNAL_IP }}; then
          echo "‚úÖ Ping exitoso a la IP interna de Jenkins."
        else
          echo "‚ùå Fall√≥ el ping a la IP interna de Jenkins."
          exit 1
        fi
        echo ""
    
        # Bucle para esperar a que Jenkins est√© disponible v√≠a curl
        echo "Esperando a que Jenkins responda..."
        for i in {1..10}; do
          if curl -s -f --connect-timeout 5 "http://${{ secrets.JENKINS_INTERNAL_IP }}:${{ secrets.JENKINS_PORT }}" > /dev/null; then
            echo "‚úÖ Jenkins respondi√≥ en http://${{ secrets.JENKINS_INTERNAL_IP }}:${{ secrets.JENKINS_PORT }}"
            exit 0 # Salir con √©xito si la conexi√≥n es exitosa
          else
            echo "Intento $i: Jenkins no est√° disponible. Reintentando..."
            sleep 5
          fi
        done
        echo "‚ùå Fall√≥ la conexi√≥n a Jenkins despu√©s de varios intentos."
        exit 1

    - name: Get PR/Branch info
      id: get-info
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "is_pr=true" >> $GITHUB_OUTPUT
          echo "branch_name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
        else
          echo "is_pr=false" >> $GITHUB_OUTPUT
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Trigger Jenkins Pipeline
      id: jenkins-trigger
      run: |
        # Configurar variables
        JENKINS_URL="http://${{ secrets.JENKINS_INTERNAL_IP }}:${{ secrets.JENKINS_PORT }}"
        JOB_NAME="${{ secrets.JENKINS_JOB_NAME }}"
        
        # Preparar par√°metros para Jenkins
        if [ "${{ steps.get-info.outputs.is_pr }}" = "true" ]; then
          BUILD_PARAMS="BRANCH_NAME=${{ steps.get-info.outputs.branch_name }}&PR_NUMBER=${{ steps.get-info.outputs.pr_number }}&COMMIT_SHA=${{ steps.get-info.outputs.commit_sha }}&IS_PR=true"
        else
          BUILD_PARAMS="BRANCH_NAME=${{ steps.get-info.outputs.branch_name }}&COMMIT_SHA=${{ steps.get-info.outputs.commit_sha }}&IS_PR=false"
        fi
        
        # Hacer la petici√≥n a Jenkins
        RESPONSE=$(curl -s -w "%{http_code}" \
          -X POST \
          -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}" \
          "${JENKINS_URL}/job/${JOB_NAME}/buildWithParameters" \
          -d "${BUILD_PARAMS}")
        
        HTTP_CODE="${RESPONSE: -3}"
        
        if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ Jenkins pipeline triggered successfully!"
          echo "jenkins_triggered=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Failed to trigger Jenkins pipeline. HTTP Code: $HTTP_CODE"
          echo "jenkins_triggered=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Get Jenkins Build Status
      if: steps.jenkins-trigger.outputs.jenkins_triggered == 'true'
      run: |
        JENKINS_URL="http://${{ secrets.JENKINS_INTERNAL_IP }}:${{ secrets.JENKINS_PORT }}"
        JOB_NAME="${{ secrets.JENKINS_JOB_NAME }}"
        
        echo "Waiting for build to start..."
        sleep 10
        
        # Obtener el √∫ltimo build number
        BUILD_NUMBER=$(curl -s \
          -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}" \
          "${JENKINS_URL}/job/${JOB_NAME}/lastBuild/buildNumber")
        
        echo "Monitoring build #${BUILD_NUMBER}..."
        echo "Jenkins URL: ${JENKINS_URL}/job/${JOB_NAME}/${BUILD_NUMBER}/"
        
        # Monitorear el build por hasta 20 minutos
        for i in {1..60}; do
          BUILD_STATUS=$(curl -s \
            -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}" \
            "${JENKINS_URL}/job/${JOB_NAME}/${BUILD_NUMBER}/api/json" | \
            python3 -c "import sys, json; data=json.load(sys.stdin); print(f'{data.get(\"building\", True)},{data.get(\"result\", \"UNKNOWN\")}')")
          
          IS_BUILDING=$(echo $BUILD_STATUS | cut -d',' -f1)
          RESULT=$(echo $BUILD_STATUS | cut -d',' -f2)
          
          if [ "$IS_BUILDING" = "False" ]; then
            echo "Build completed with result: $RESULT"
            if [ "$RESULT" = "SUCCESS" ]; then
              echo "‚úÖ Jenkins pipeline completed successfully!"
              exit 0
            else
              echo "‚ùå Jenkins pipeline failed with result: $RESULT"
              exit 1
            fi
          else
            echo "Build still running... (attempt $i/60)"
            sleep 20
          fi
        done
        
        echo "‚ö†Ô∏è Build monitoring timeout reached"
        exit 1

    - name: Comment on PR (Success)
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v7
      with:
        script: |
          const buildUrl = `http://${{ secrets.JENKINS_INTERNAL_IP }}:${{ secrets.JENKINS_PORT }}/job/${{ secrets.JENKINS_JOB_NAME }}/lastBuild/`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `‚úÖ **Jenkins Pipeline Successful!**
            
            üöÄ Build completed successfully for PR #${{ github.event.number }}
            üìã Branch: \`${{ github.head_ref }}\`
            üîó [View Jenkins Build](${buildUrl})
            üìä Commit: \`${{ github.event.pull_request.head.sha }}\``
          });

    - name: Comment on PR (Failure)
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const buildUrl = `http://${{ secrets.JENKINS_INTERNAL_IP }}:${{ secrets.JENKINS_PORT }}/job/${{ secrets.JENKINS_JOB_NAME }}/lastBuild/`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `‚ùå **Jenkins Pipeline Failed!**
            
            üö® Build failed for PR #${{ github.event.number }}
            üìã Branch: \`${{ github.head_ref }}\`
            üîó [View Jenkins Build](${buildUrl})
            üìä Commit: \`${{ github.event.pull_request.head.sha }}\`
            
            Please check the Jenkins logs for more details.`
          });

    - name: Cleanup WireGuard
      if: always()
      run: |
        sudo wg-quick down wg0 || true
        sudo rm -f /etc/wireguard/wg0.conf || true
